generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  LEAD
  TESTER
  VIEWER
}

enum TestStatus {
  PASS
  FAIL
  BLOCKED
  SKIPPED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  role          Role      @default(VIEWER)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  testCases     TestCase[] @relation("TestCaseOwner")
  executions    TestExecution[] @relation("ExecutionCreator")
  accounts      Account[]
  sessions      Session[]
  apiTokens     PersonalAccessToken[]
}

model PersonalAccessToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tokenHash String
  label     String
  scopes    String[]
  expiresAt DateTime?
  createdAt DateTime @default(now())
}

model Project {
  id          String       @id @default(cuid())
  key         String
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  testCases   TestCase[]
  plans       TestPlan[]
  executions  TestExecution[]
  requirementLinks RequirementLink[]
  settings    ProjectSetting?

  @@unique([key])
}

model ProjectSetting {
  id            String   @id @default(cuid())
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     String   @unique
  tags          String[] @default([])
  components    String[] @default([])
  environments  String[] @default([])
  priorities    Priority[] @default([LOW, MEDIUM, HIGH, CRITICAL])
}

model TestCase {
  id           String    @id @default(cuid())
  project      Project   @relation(fields: [projectId], references: [id])
  projectId    String
  key          String
  name         String
  description  String?
  preconditions String?
  steps        Json
  expected     String?
  priority     Priority   @default(MEDIUM)
  status       String     @default("Draft")
  tags         String[]   @default([])
  component    String?
  owner        User?      @relation("TestCaseOwner", fields: [ownerId], references: [id])
  ownerId      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  plans        TestCasePlan[]
  results      TestResult[]
  requirements RequirementLink[]
  attachments  Attachment[]

  @@unique([projectId, key])
  @@index([projectId])
}

model TestPlan {
  id          String        @id @default(cuid())
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String
  key         String
  name        String
  description String?
  targetVersions String[] @default([])
  environments   String[] @default([])
  tags           String[] @default([])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  cases        TestCasePlan[]
  executions   TestExecution[]

  @@unique([projectId, key])
}

model TestCasePlan {
  id        String   @id @default(cuid())
  plan      TestPlan @relation(fields: [planId], references: [id])
  planId    String
  case      TestCase @relation(fields: [caseId], references: [id])
  caseId    String
  createdAt DateTime @default(now())

  @@unique([planId, caseId])
}

model TestExecution {
  id          String       @id @default(cuid())
  project     Project      @relation(fields: [projectId], references: [id])
  projectId   String
  plan        TestPlan?    @relation(fields: [planId], references: [id])
  planId      String?
  key         String
  name        String
  description String?
  environment String?
  revision    String?
  buildUrl    String?
  commitSha   String?
  labels      String[] @default([])
  startedAt   DateTime?
  finishedAt  DateTime?
  createdBy   User?        @relation("ExecutionCreator", fields: [createdById], references: [id])
  createdById String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  results     TestResult[]
  attachments Attachment[]

  @@unique([projectId, key])
}

model TestResult {
  id           String      @id @default(cuid())
  execution    TestExecution @relation(fields: [executionId], references: [id])
  executionId  String
  testCase     TestCase    @relation(fields: [caseId], references: [id])
  caseId       String
  status       TestStatus
  durationMs   Int?
  evidenceURLs String[] @default([])
  errorMessage String?
  stepsLog     Json?
  retried      Boolean   @default(false)
  attempt      Int       @default(1)
  createdAt    DateTime  @default(now())

  @@index([executionId])
  @@index([caseId])
}

model RequirementLink {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  testCase    TestCase @relation(fields: [testCaseId], references: [id])
  testCaseId  String
  externalUrl String
  type        String
  createdAt   DateTime @default(now())
}

model Attachment {
  id          String   @id @default(cuid())
  url         String
  fileName    String
  contentType String
  size        Int
  testCase    TestCase? @relation(fields: [testCaseId], references: [id])
  testCaseId  String?
  testResult  TestResult? @relation(fields: [testResultId], references: [id])
  testResultId String?
  execution   TestExecution? @relation(fields: [executionId], references: [id])
  executionId String?
  createdAt   DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  action    String
  userId    String?
  payload   Json
  createdAt DateTime @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
