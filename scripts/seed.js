const fs = require("node:fs");
const path = require("node:path");
const { randomUUID } = require("node:crypto");

const DATA_PATH = path.resolve(__dirname, "../data/demo-data.json");

const createUser = (name, role) => ({
  id: randomUUID(),
  name,
  email: `${name.toLowerCase().replace(/\s+/g, ".")}@testsimplify.local`,
  role,
  password: "hashed-password"
});

const createProject = (index) => ({
  id: randomUUID(),
  key: `PRJ-${index + 1}`,
  name: `Project ${index + 1}`,
  description: "Demo project generated by the offline seed script"
});

const createTestCase = (project, index) => ({
  id: randomUUID(),
  projectId: project.id,
  key: `${project.key}-TC-${index + 1}`,
  name: `User can authenticate ${index + 1}`,
  description: "Login scenario",
  steps: [
    { action: "Open login page", expected: "Login form is displayed" },
    { action: "Submit credentials", expected: "Dashboard is loaded" }
  ],
  expected: "User lands on dashboard",
  priority: index % 3 === 0 ? "HIGH" : "MEDIUM",
  status: "READY",
  tags: ["regression", "login"],
  component: "web",
  ownerId: null
});

const createExecution = (project, plan, index, user) => ({
  id: randomUUID(),
  projectId: project.id,
  planId: plan.id,
  key: `${project.key}-EXEC-${index + 1}`,
  name: `Execution ${index + 1}`,
  environment: index % 2 === 0 ? "staging" : "production",
  createdById: user.id,
  startedAt: new Date().toISOString(),
  finishedAt: new Date().toISOString()
});

const createResult = (execution, testCase, index) => ({
  id: randomUUID(),
  executionId: execution.id,
  caseId: testCase.id,
  status: index % 5 === 0 ? "FAIL" : "PASS",
  durationMs: 12000,
  errorMessage: index % 5 === 0 ? "AssertionError: Expected status 200" : null,
  stepsLog: testCase.steps.map((step) => ({
    name: step.action,
    status: index % 5 === 0 ? "FAIL" : "PASS",
    error: index % 5 === 0 ? "Element not visible" : null
  }))
});

const createPlan = (project, cases) => ({
  id: randomUUID(),
  projectId: project.id,
  key: `${project.key}-PLAN-1`,
  name: "Regression plan",
  description: "Critical regression suite",
  tags: ["release"],
  environments: ["staging", "production"],
  cases: cases.slice(0, 8).map((testCase) => ({ planId: null, caseId: testCase.id }))
});

const generateData = () => {
  const admin = createUser("Admin", "ADMIN");
  const lead = createUser("Lead", "LEAD");
  const tester = createUser("Tester", "TESTER");
  const viewer = createUser("Viewer", "VIEWER");

  const users = [admin, lead, tester, viewer];
  const projects = Array.from({ length: 3 }).map((_, index) => createProject(index));

  const cases = projects.flatMap((project) =>
    Array.from({ length: 20 }).map((_, idx) => ({ ...createTestCase(project, idx), ownerId: admin.id }))
  );

  const plans = projects.map((project) => createPlan(project, cases.filter((testCase) => testCase.projectId === project.id)));

  const executions = plans.flatMap((plan, index) => {
    const project = projects.find((proj) => proj.id === plan.projectId);
    return Array.from({ length: 3 }).map((_, execIndex) => createExecution(project, plan, execIndex, lead));
  });

  const results = executions.flatMap((execution) => {
    const relatedCases = cases
      .filter((testCase) => testCase.projectId === execution.projectId)
      .slice(0, 8);
    return relatedCases.map((testCase, index) => createResult(execution, testCase, index));
  });

  return {
    users,
    projects,
    cases,
    plans,
    executions,
    results,
    tokens: [],
    requirements: [],
    attachments: [],
    accounts: [],
    sessions: [],
    verificationTokens: []
  };
};

const main = () => {
  const data = generateData();
  fs.mkdirSync(path.dirname(DATA_PATH), { recursive: true });
  fs.writeFileSync(DATA_PATH, JSON.stringify(data, null, 2));
  console.log(`Seed data written to ${DATA_PATH}`);
};

if (require.main === module) {
  try {
    main();
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
}

module.exports = { generateData };
